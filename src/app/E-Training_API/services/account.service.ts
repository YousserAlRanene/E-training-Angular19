/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAccountLoginPost } from '../fn/account/api-account-login-post';
import { ApiAccountLoginPost$Params } from '../fn/account/api-account-login-post';
import { apiAccountLogoutPost } from '../fn/account/api-account-logout-post';
import { ApiAccountLogoutPost$Params } from '../fn/account/api-account-logout-post';
import { apiAccountMeGet } from '../fn/account/api-account-me-get';
import { ApiAccountMeGet$Params } from '../fn/account/api-account-me-get';
import { apiAccountRegisterPost } from '../fn/account/api-account-register-post';
import { ApiAccountRegisterPost$Params } from '../fn/account/api-account-register-post';
import { AuthResponseViewModel } from '../models/auth-response-view-model';

@Injectable({ providedIn: 'root' })
export class AccountService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiAccountLoginPost()` */
  static readonly ApiAccountLoginPostPath = '/api/Account/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAccountLoginPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAccountLoginPost$Response(params?: ApiAccountLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthResponseViewModel>> {
    return apiAccountLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAccountLoginPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAccountLoginPost(params?: ApiAccountLoginPost$Params, context?: HttpContext): Observable<AuthResponseViewModel> {
    return this.apiAccountLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthResponseViewModel>): AuthResponseViewModel => r.body)
    );
  }

  /** Path part for operation `apiAccountRegisterPost()` */
  static readonly ApiAccountRegisterPostPath = '/api/Account/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAccountRegisterPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAccountRegisterPost$Response(params?: ApiAccountRegisterPost$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthResponseViewModel>> {
    return apiAccountRegisterPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAccountRegisterPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAccountRegisterPost(params?: ApiAccountRegisterPost$Params, context?: HttpContext): Observable<AuthResponseViewModel> {
    return this.apiAccountRegisterPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthResponseViewModel>): AuthResponseViewModel => r.body)
    );
  }

  /** Path part for operation `apiAccountLogoutPost()` */
  static readonly ApiAccountLogoutPostPath = '/api/Account/logout';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAccountLogoutPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAccountLogoutPost$Response(params?: ApiAccountLogoutPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAccountLogoutPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAccountLogoutPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAccountLogoutPost(params?: ApiAccountLogoutPost$Params, context?: HttpContext): Observable<void> {
    return this.apiAccountLogoutPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiAccountMeGet()` */
  static readonly ApiAccountMeGetPath = '/api/Account/me';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAccountMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAccountMeGet$Response(params?: ApiAccountMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthResponseViewModel>> {
    return apiAccountMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAccountMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAccountMeGet(params?: ApiAccountMeGet$Params, context?: HttpContext): Observable<AuthResponseViewModel> {
    return this.apiAccountMeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthResponseViewModel>): AuthResponseViewModel => r.body)
    );
  }

}
