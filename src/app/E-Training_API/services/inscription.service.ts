/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiInscriptionGet } from '../fn/inscription/api-inscription-get';
import { ApiInscriptionGet$Params } from '../fn/inscription/api-inscription-get';
import { apiInscriptionInscriptionIdDelete } from '../fn/inscription/api-inscription-inscription-id-delete';
import { ApiInscriptionInscriptionIdDelete$Params } from '../fn/inscription/api-inscription-inscription-id-delete';
import { apiInscriptionInscriptionPost } from '../fn/inscription/api-inscription-inscription-post';
import { ApiInscriptionInscriptionPost$Params } from '../fn/inscription/api-inscription-inscription-post';
import { apiInscriptionMesInscriptionsGet } from '../fn/inscription/api-inscription-mes-inscriptions-get';
import { ApiInscriptionMesInscriptionsGet$Params } from '../fn/inscription/api-inscription-mes-inscriptions-get';
import { InscriptionViewModel } from '../models/inscription-view-model';

@Injectable({ providedIn: 'root' })
export class InscriptionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiInscriptionMesInscriptionsGet()` */
  static readonly ApiInscriptionMesInscriptionsGetPath = '/api/Inscription/mes-inscriptions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiInscriptionMesInscriptionsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiInscriptionMesInscriptionsGet$Response(params?: ApiInscriptionMesInscriptionsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InscriptionViewModel>>> {
    return apiInscriptionMesInscriptionsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiInscriptionMesInscriptionsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiInscriptionMesInscriptionsGet(params?: ApiInscriptionMesInscriptionsGet$Params, context?: HttpContext): Observable<Array<InscriptionViewModel>> {
    return this.apiInscriptionMesInscriptionsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InscriptionViewModel>>): Array<InscriptionViewModel> => r.body)
    );
  }

  /** Path part for operation `apiInscriptionInscriptionPost()` */
  static readonly ApiInscriptionInscriptionPostPath = '/api/Inscription/inscription';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiInscriptionInscriptionPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiInscriptionInscriptionPost$Response(params: ApiInscriptionInscriptionPost$Params, context?: HttpContext): Observable<StrictHttpResponse<InscriptionViewModel>> {
    return apiInscriptionInscriptionPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiInscriptionInscriptionPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiInscriptionInscriptionPost(params: ApiInscriptionInscriptionPost$Params, context?: HttpContext): Observable<InscriptionViewModel> {
    return this.apiInscriptionInscriptionPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<InscriptionViewModel>): InscriptionViewModel => r.body)
    );
  }

  /** Path part for operation `apiInscriptionInscriptionIdDelete()` */
  static readonly ApiInscriptionInscriptionIdDeletePath = '/api/Inscription/{inscriptionId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiInscriptionInscriptionIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiInscriptionInscriptionIdDelete$Response(params: ApiInscriptionInscriptionIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiInscriptionInscriptionIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiInscriptionInscriptionIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiInscriptionInscriptionIdDelete(params: ApiInscriptionInscriptionIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiInscriptionInscriptionIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiInscriptionGet()` */
  static readonly ApiInscriptionGetPath = '/api/Inscription';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiInscriptionGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiInscriptionGet$Response(params?: ApiInscriptionGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InscriptionViewModel>>> {
    return apiInscriptionGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiInscriptionGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiInscriptionGet(params?: ApiInscriptionGet$Params, context?: HttpContext): Observable<Array<InscriptionViewModel>> {
    return this.apiInscriptionGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InscriptionViewModel>>): Array<InscriptionViewModel> => r.body)
    );
  }

}
