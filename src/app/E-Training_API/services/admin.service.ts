/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAdminFormateursGet } from '../fn/admin/api-admin-formateurs-get';
import { ApiAdminFormateursGet$Params } from '../fn/admin/api-admin-formateurs-get';
import { apiAdminFormateursIdGet } from '../fn/admin/api-admin-formateurs-id-get';
import { ApiAdminFormateursIdGet$Params } from '../fn/admin/api-admin-formateurs-id-get';
import { apiAdminFormateursIdPut } from '../fn/admin/api-admin-formateurs-id-put';
import { ApiAdminFormateursIdPut$Params } from '../fn/admin/api-admin-formateurs-id-put';
import { apiAdminFormateursIdResetPasswordPost } from '../fn/admin/api-admin-formateurs-id-reset-password-post';
import { ApiAdminFormateursIdResetPasswordPost$Params } from '../fn/admin/api-admin-formateurs-id-reset-password-post';
import { apiAdminFormateursPost } from '../fn/admin/api-admin-formateurs-post';
import { ApiAdminFormateursPost$Params } from '../fn/admin/api-admin-formateurs-post';
import { apiAdminUtilisateursGet } from '../fn/admin/api-admin-utilisateurs-get';
import { ApiAdminUtilisateursGet$Params } from '../fn/admin/api-admin-utilisateurs-get';
import { apiAdminUtilisateursIdStatusPut } from '../fn/admin/api-admin-utilisateurs-id-status-put';
import { ApiAdminUtilisateursIdStatusPut$Params } from '../fn/admin/api-admin-utilisateurs-id-status-put';
import { FormateurViewModel } from '../models/formateur-view-model';
import { PasswordResetViewModel } from '../models/password-reset-view-model';
import { UserStatusViewModel } from '../models/user-status-view-model';

@Injectable({ providedIn: 'root' })
export class AdminService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiAdminFormateursGet()` */
  static readonly ApiAdminFormateursGetPath = '/api/Admin/formateurs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAdminFormateursGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAdminFormateursGet$Response(params?: ApiAdminFormateursGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FormateurViewModel>>> {
    return apiAdminFormateursGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAdminFormateursGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAdminFormateursGet(params?: ApiAdminFormateursGet$Params, context?: HttpContext): Observable<Array<FormateurViewModel>> {
    return this.apiAdminFormateursGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FormateurViewModel>>): Array<FormateurViewModel> => r.body)
    );
  }

  /** Path part for operation `apiAdminFormateursPost()` */
  static readonly ApiAdminFormateursPostPath = '/api/Admin/formateurs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAdminFormateursPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAdminFormateursPost$Response(params?: ApiAdminFormateursPost$Params, context?: HttpContext): Observable<StrictHttpResponse<FormateurViewModel>> {
    return apiAdminFormateursPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAdminFormateursPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAdminFormateursPost(params?: ApiAdminFormateursPost$Params, context?: HttpContext): Observable<FormateurViewModel> {
    return this.apiAdminFormateursPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<FormateurViewModel>): FormateurViewModel => r.body)
    );
  }

  /** Path part for operation `apiAdminFormateursIdGet()` */
  static readonly ApiAdminFormateursIdGetPath = '/api/Admin/formateurs/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAdminFormateursIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAdminFormateursIdGet$Response(params: ApiAdminFormateursIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<FormateurViewModel>> {
    return apiAdminFormateursIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAdminFormateursIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAdminFormateursIdGet(params: ApiAdminFormateursIdGet$Params, context?: HttpContext): Observable<FormateurViewModel> {
    return this.apiAdminFormateursIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<FormateurViewModel>): FormateurViewModel => r.body)
    );
  }

  /** Path part for operation `apiAdminFormateursIdPut()` */
  static readonly ApiAdminFormateursIdPutPath = '/api/Admin/formateurs/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAdminFormateursIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAdminFormateursIdPut$Response(params: ApiAdminFormateursIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<FormateurViewModel>> {
    return apiAdminFormateursIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAdminFormateursIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAdminFormateursIdPut(params: ApiAdminFormateursIdPut$Params, context?: HttpContext): Observable<FormateurViewModel> {
    return this.apiAdminFormateursIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<FormateurViewModel>): FormateurViewModel => r.body)
    );
  }

  /** Path part for operation `apiAdminFormateursIdResetPasswordPost()` */
  static readonly ApiAdminFormateursIdResetPasswordPostPath = '/api/Admin/formateurs/{id}/reset-password';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAdminFormateursIdResetPasswordPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAdminFormateursIdResetPasswordPost$Response(params: ApiAdminFormateursIdResetPasswordPost$Params, context?: HttpContext): Observable<StrictHttpResponse<PasswordResetViewModel>> {
    return apiAdminFormateursIdResetPasswordPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAdminFormateursIdResetPasswordPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAdminFormateursIdResetPasswordPost(params: ApiAdminFormateursIdResetPasswordPost$Params, context?: HttpContext): Observable<PasswordResetViewModel> {
    return this.apiAdminFormateursIdResetPasswordPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<PasswordResetViewModel>): PasswordResetViewModel => r.body)
    );
  }

  /** Path part for operation `apiAdminUtilisateursIdStatusPut()` */
  static readonly ApiAdminUtilisateursIdStatusPutPath = '/api/Admin/utilisateurs/{id}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAdminUtilisateursIdStatusPut()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAdminUtilisateursIdStatusPut$Response(params: ApiAdminUtilisateursIdStatusPut$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiAdminUtilisateursIdStatusPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAdminUtilisateursIdStatusPut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAdminUtilisateursIdStatusPut(params: ApiAdminUtilisateursIdStatusPut$Params, context?: HttpContext): Observable<string> {
    return this.apiAdminUtilisateursIdStatusPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `apiAdminUtilisateursGet()` */
  static readonly ApiAdminUtilisateursGetPath = '/api/Admin/utilisateurs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAdminUtilisateursGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAdminUtilisateursGet$Response(params?: ApiAdminUtilisateursGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserStatusViewModel>>> {
    return apiAdminUtilisateursGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAdminUtilisateursGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAdminUtilisateursGet(params?: ApiAdminUtilisateursGet$Params, context?: HttpContext): Observable<Array<UserStatusViewModel>> {
    return this.apiAdminUtilisateursGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserStatusViewModel>>): Array<UserStatusViewModel> => r.body)
    );
  }

}
