/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiFormationGet } from '../fn/formation/api-formation-get';
import { ApiFormationGet$Params } from '../fn/formation/api-formation-get';
import { apiFormationIdDelete } from '../fn/formation/api-formation-id-delete';
import { ApiFormationIdDelete$Params } from '../fn/formation/api-formation-id-delete';
import { apiFormationIdGet } from '../fn/formation/api-formation-id-get';
import { ApiFormationIdGet$Params } from '../fn/formation/api-formation-id-get';
import { apiFormationIdPut } from '../fn/formation/api-formation-id-put';
import { ApiFormationIdPut$Params } from '../fn/formation/api-formation-id-put';
import { apiFormationPost } from '../fn/formation/api-formation-post';
import { ApiFormationPost$Params } from '../fn/formation/api-formation-post';
import { Formation } from '../models/formation';

@Injectable({ providedIn: 'root' })
export class FormationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiFormationGet()` */
  static readonly ApiFormationGetPath = '/api/Formation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFormationGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFormationGet$Response(params?: ApiFormationGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Formation>>> {
    return apiFormationGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFormationGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFormationGet(params?: ApiFormationGet$Params, context?: HttpContext): Observable<Array<Formation>> {
    return this.apiFormationGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Formation>>): Array<Formation> => r.body)
    );
  }

  /** Path part for operation `apiFormationPost()` */
  static readonly ApiFormationPostPath = '/api/Formation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFormationPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFormationPost$Response(params?: ApiFormationPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Formation>> {
    return apiFormationPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFormationPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFormationPost(params?: ApiFormationPost$Params, context?: HttpContext): Observable<Formation> {
    return this.apiFormationPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Formation>): Formation => r.body)
    );
  }

  /** Path part for operation `apiFormationIdGet()` */
  static readonly ApiFormationIdGetPath = '/api/Formation/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFormationIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFormationIdGet$Response(params: ApiFormationIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Formation>> {
    return apiFormationIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFormationIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFormationIdGet(params: ApiFormationIdGet$Params, context?: HttpContext): Observable<Formation> {
    return this.apiFormationIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Formation>): Formation => r.body)
    );
  }

  /** Path part for operation `apiFormationIdPut()` */
  static readonly ApiFormationIdPutPath = '/api/Formation/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFormationIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFormationIdPut$Response(params: ApiFormationIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiFormationIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFormationIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFormationIdPut(params: ApiFormationIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiFormationIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiFormationIdDelete()` */
  static readonly ApiFormationIdDeletePath = '/api/Formation/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFormationIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFormationIdDelete$Response(params: ApiFormationIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiFormationIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFormationIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFormationIdDelete(params: ApiFormationIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiFormationIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
